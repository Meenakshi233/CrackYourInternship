class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {

        //brute force approach
        set<vector<int>> st;
        for(int i=0; i<nums.size(); i++){
            for(int j=i+1; j<nums.size(); j++){
                for(int k=j+1; k<nums.size(); k++){
                    if(nums[i]+nums[j]+nums[k] == 0){
                        vector<int> temp = {nums[i],nums[j],nums[k]};
                        sort(temp.begin(), temp.end());
                        st.insert(temp);
                    }
                }
            }
        }
        vector<vector<int>> res(st.begin(),st.end());
        return res;

        // better approach
        set<vector<int>> st;
        for(int i=0; i<nums.size(); i++){
            set<int> hashSet;
            for(int j=i+1; j<nums.size(); j++){
                int num3 = -1*(nums[i]+nums[j]);
                if(hashSet.find(num3) != hashSet.end()){
                    vector<int> temp = {nums[i],nums[j],num3};
                    sort(temp.begin(),temp.end());
                    st.insert(temp);
                }
                hashSet.insert(nums[j]);
            }
        }
        vector<vector<int>> res(st.begin(),st.end());
        return res;

        // optimal approach my own code
        vector<vector<int>> ans;
        sort(nums.begin(),nums.end());
        for(int i=0; i<nums.size(); i++){
            int num1=nums[i];
            int j=i+1;
            int k=nums.size()-1;
            while(j<k){
                if(nums[i]+nums[j]+nums[k]==0){
                    vector<int> temp = {nums[i],nums[j],nums[k]};
                    ans.push_back(temp);
                    int num2=nums[j];
                    int num3=nums[k];
                    while(j<nums.size() && nums[j]==num2){
                        j++;
                    }
                    while(k<nums.size() && nums[k]==num3){
                        k--;
                    }
                }
                else if(nums[i]+nums[j]+nums[k]<0){
                    j++;
                }
                else{
                    k--;
                }
            }
            while(i<nums.size() && num1==nums[i]){
                i++;
            }
            i--;
        }
        return ans;

        // optimal approach standard code
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;
        for(int i=0; i<nums.size(); i++){
            if(i>0 && nums[i]==nums[i-1]) continue;
            int j=i+1;
            int k=nums.size()-1;
            while(j<k){
                int sum = nums[i]+nums[j]+nums[k];
                if(sum<0){
                    j++;
                }
                else if(sum>0){
                    k--;
                }
                else if(sum==0){
                    vector<int> temp = {nums[i],nums[j],nums[k]};
                    ans.push_back(temp);
                    j++;
                    k--;
                    while(j<k && nums[j]==nums[j-1]) j++;
                    while(j<k && nums[k]==nums[k+1]) k--;
                }
            }
        }
        return ans;
    }
};
