class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        
        // brute force approach
        set<vector<int>> st;
        for(int i=0; i<nums.size(); i++){
            for(int j=i+1; j<nums.size(); j++){
                for(int k=j+1; k<nums.size(); k++){
                    for(int l=k+1; l<nums.size(); l++){
                        int sum = nums[i]+nums[j]+nums[k]+nums[l];
                        if(sum==target){
                            vector<int> temp={nums[i],nums[j],nums[k],nums[l]};
                            sort(temp.begin(),temp.end());
                            st.insert(temp);
                        }
                    }
                }
            }
        }
        vector<vector<int>> result(st.begin(),st.end());
        return result;

        // better approach
        set<vector<int>> st;
        for(int i=0; i<nums.size(); i++){
            for(int j=i+1; j<nums.size(); j++){
                set<int> hashSet;
                for(int k=j+1; k<nums.size(); k++){
                    int t= target-(nums[i]+nums[j]+nums[k]);
                    if(hashSet.find(t) != hashSet.end()){
                        vector<int> temp = {nums[i],nums[j],nums[k],t};
                        sort(temp.begin(),temp.end());
                        st.insert(temp);
                    }
                    hashSet.insert(nums[k]);
                    }
                }
            }
        vector<vector<int>> result(st.begin(),st.end());
        return result;

        // optimal approach
        sort(nums.begin(),nums.end());
        vector<vector<int>> result;
        for(int i=0; i<nums.size(); i++){
            if(i>0 && nums[i]==nums[i-1]) continue;
            for(int j=i+1; j<nums.size(); j++){
                if( j>i+1 && nums[j]==nums[j-1]) continue;
                int k=j+1;
                int l=nums.size()-1;
                while(k<l){
                    long long sum = nums[i];
                    sum += nums[j];
                    sum += nums[k];
                    sum += nums[l];
                    if(sum<target){
                        k++;
                    }
                    else if(sum>target){
                        l--;
                    }
                    else if(sum==target){
                        vector<int> temp = {nums[i],nums[j],nums[k],nums[l]};
                        result.push_back(temp);
                        k++;
                        l--;
                        while(k<l && nums[k]==nums[k-1]) k++;
                        while(k<l && nums[l]==nums[l+1]) l--; 
                    }
                }
            }
        }
        return result;
    }
};
